#!/usr/bin/env node
// -*- mode: js -*-

const fs = require('fs');
const slm = require('slm');

const NG2_PRECOMPILE_REPLACE = [
	[/([^\S\n]|[[(])\[(\S+)\](\)?=)/g, '$1【$2】$3'],
	[/([^\S\n]|【)\((\S+)\)(】?=)/g, '$1〖$2〗$3'],
	[/(\S[^\S\n]*(?:[^\S\n]|\[))#(\S+)/g, '$1⁜$2']
];
const NG2_POSTCOMPILE_REPLACE = [
	[/【/g, '['],
	[/】/g, ']'],
	[/〖/g, '('],
	[/〗/g, ')'],
	[/⁜/g, '#']
];

function replace(string, argSets) {
	for(let args of argSets) {
		string = string.replace.apply(string, args);
	}
	return string;
}

function read(file, encoding) {
	encoding = encoding || 'utf8';
	return new Promise((resolve, reject) => {
		if(typeof file === 'string') {
			fs.readFile(file, encoding, (error, data) => {
				if(error) {
					reject(error);
				}
				else {
					resolve(data);
				}
			});
		}
		else {
			let data = '';
			file.setEncoding(encoding);
			file.on('readable', () => {
				let chunk;
				while((chunk = file.read())) {
					data += chunk;
				}
			});
			file.on('error', (err) => reject(err));
			file.on('end', () => resolve(data));
		}
	});
}

function write(file, data) {
	if(typeof file === 'string') {
		fs.writeFileSync(file, data);
	}
	else {
		file.write(data);
	}
}

function main(options) {
	let data;
	if(options.data) {
		try {
			data = require(options.data);
		}
		catch(e) {
			data = require('./' + options.data);
		}
	}
	else {
		data = {};
	}
	return read(options.input).then((file) => {
		if(options.ng2) {
			file = replace(file, NG2_PRECOMPILE_REPLACE);
		}
		let compiled = slm.compile(file)(data);
		if(options.ng2) {
			compiled = replace(compiled, NG2_POSTCOMPILE_REPLACE);
		}
		write(options.output, compiled);
	});
}

const program = require('commander')
	.version('0.2.0')
	.option(
		'-i, --input <file>',
		'input slm file (default: stdin)'/*,
		process.stdin*/
	)
	.option(
		'-o, --output <file>',
		'output html file (default: stdout)'/*,
		process.stdout*/
	)
	.option(
		'-d, --data <file>',
		'template data module'
	)
	.option(
		'--ng2',
		'support Angular 2+ attribute syntax'
	)
	.parse(process.argv);

if(program.input == null) {
	program.input = process.stdin;
}

if(program.output == null) {
	program.output = process.stdout;
}

main(program).catch((err) => {
	console.error(err);
	process.exit(1);
});
